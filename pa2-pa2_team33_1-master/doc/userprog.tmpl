+--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Janhavi Desale (janhavik@buffalo.edu)
Pinaz Shaikh (pinazmoh@buffalo.edu)
Krati Sharma (kratisha@buffalo.edu)



---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>>Ans: char *argv[200]; //to store tokens after breaking string into filename and arguments.
	int argc; // to store number of arguments
	int *esp_addr[200]; //to store addresses of arguments.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?

>>Ans: Below are he step-wise implementation:
	1. Broke the string into file name and arguments and stored in an array.
	2. Used the the array to push the elements on stack in reverse order starting from last agruments first which ensures the rights order.
	3. Followed by word-align padding, which is mod of last address after pushing argv[] on stack, sentinel character and address of argv[]
	   elements stored on stack and the argv address, which is then followed by argc and fake return address.

>> How do you avoid overflowing the stack page?

Ans>> By not exeeding the stack space.
	 

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

Ans>> strtok_r() allows etra argument which is specifying position of next token which can be used for looping through.
      Also, strtok() uses global data which is unsafe for use in kernels.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

Ans>> 1. Since in unix shell sepeartes the executable name and arguments, this allows processing of arguments before passing to kernel.
      2. It is also more secure to do this on kernel side than user side.
      3. This can also lead to error handling on the user side which reduces the overhead at kernel side.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Ans>> struct process_file {
    	struct file *file;
     	struct list_elem elem;    
     	int fd;
	};
	-This a structure to keep track files and its respective file descriptor.
	Which is being used whenever we want to find the respective file for the given fd.
	
	unsigned int fd; /*File Descriptor in struct thread in thread.h*/
	-struct list file_list; /*in struct thread in thread.h */
	this is to store data a process level and maintain different fd's for each process for same file.

        struct list file_list; 
        -  The file_list is use to keep track of files.
    
  	  int fd; 
        -  The fd is the current file descriptor.
      
         struct list child_list;
       -  The child_list is a list of the child processes of the thread.
    
         tid_t parent;
       -  The thread id of the parent of this thread.
      
         struct child_process* cp;
       -  This is pointer the current running child process.
      
     
         struct file* executable; 
       -  Use for denying writes to executables.
    
         struct list lock_list;
      -  Use to keep track of locks the thread holds.
        

          struct child_process {
          int pid;
 	  int load_status;
  	  int wait;
  	  int exit;
  	  int status;
   	  struct semaphore load_sema;
 	  struct semaphore exit_sema;
 	  struct list_elem elem;
		};
	- The struct child_proc is used for child process which will contain
            important information 
  
  
           


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

>>Ans: Whenever a file is opened it creates new fd which remains unique on each syscall_open() call.
	This is unique at process level.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>>Ans: Below are the steps followed for READ():
	1. First we validate buffer.
	2. Then we call the appropriate function (i.e. syscall_fileread())to handle read.
	3. In this function we check whether fd is 0 for reading through keyboard, which is handled by using input_getc() and returns the read 		   bytes.
	4. If fd <> 0 that means it can be read from file, which is performed using standard file_read() function and returns read_bytes.

 	Below are the steps followed for WRITE():
	1. First we validate buffer.
	2. Fd 1 writes to console, hence we use putbuf() to write buffer to console.
	3. If fd <>0 then we write to file. Therefore, we retrieve appropriate file from the given fd and then pass the file to standrad     	        file_write() function.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

        The system call "wait" calls process_wait which will wait for child
  	processes to terminate using a while loop .

    

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?


We have used the parameter status to keep a track in the child_proc struct. We check whether the status is loaded or not. If it is not then we call syscall_exit(-1)

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>>Ans: We have implemented a function handle this which helps handle unmapped memory and handle error by call to syscall_exit(-1).

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>>Ans: Intitally we thought of casting struct file * as fd but then wwe realized this lead to race condition.
       Hence we created a struct to keep track of uniue fd's.
 
>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Ans: The first phase took more time and efforts to understand the stack. Otherwise the pther phases were pretty clear, but required efforts to debug and figue out tests.
 
>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Ans: Yes, we now understand how argument passing works and file system.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

Ans: A little more hint on how to get started with imppementing syscalls would be really helpful.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

Ans: No comments.
>> Any other comments?
